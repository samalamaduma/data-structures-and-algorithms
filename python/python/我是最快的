from collections import defaultdict

start = tuple(map(int, input().split()))
end = tuple(map(int, input().split()))
m = int(input())
board = [[1] * 11 for _ in range(11)]
for _ in range(m):
    x, y = map(int, input().split())
    board[x][y] = 0

visited = set()
visited.add(start)
vertice = [start]
path = defaultdict(list)
path[start].append((start, None, 0))
directions = [(-1, -2), (-1, 2), (1, -2), (1, 2), (-2, 1), (-2, -1), (2, -1), (2, 1)]
ans = []
temp = []

while vertice:
    tempvisited = set()
    temp = []
    for x, y in vertice:
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 11 and 0 <= ny < 11 and board[nx][ny] and board[x + dx // abs(dx) * (abs(dx) - 1)][y + dy // abs(dy) * (abs(dy) - 1)] and (nx, ny) not in visited:
                tempvisited.add((nx, ny))
                path[nx, ny].append(((nx, ny), (x, y), path[(x, y)][0][2] + 1))
                temp.append((nx, ny))
    if end not in tempvisited:
        visited = visited.union(tempvisited)
        vertice = temp
    else:
        if len(path[end]) != 1:
            print(len(path[end]))
            break
        else:
            now = path[end][0][0]
            while path[now][0][1]:
                ans = ["({},{})".format(now[0], now[1])] + ans
                now = path[now][0][1]
            ans = ["({},{})".format(start[0],start[1])] + ans
            print("-".join(ans))
            break