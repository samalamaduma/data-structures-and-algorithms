class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        self.height = 1

class avl:
    def __init__(self):
        self.root = None
    
    def insert(self, value):
        if not self.root:
            self.root = Node(value)
        else:
            self.root = self._insert(value, self.root)
    
    def _insert(self, value, node):
        if not node:
            return Node(value)
        elif value < node.value:
            node.left = self._insert(value, node.left)
        else:
            node.right = self._insert(value, node.right)

        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))

        balance = self._get_balance(node)

        if balance > 1:
            if value < node.left.value:
                return self.rrotate(node)
            else:
                node.left = self.lrotate(node.left)
                return self.rrotate(node)
        
        elif balance < -1:
            if value > node.right.value:
                return self.lrotate(node)
            else:
                node.right = self.rrotate(node.right)
                return self.lrotate(node)
        
        return node
    
    def _get_height(self, node):
        if not node:
            return 0
        else:
            return node.height
        
    def _get_balance(self, node):
        if not node:
            return 0
        else:
            return self._get_height(node.left) - self._get_height(node.right)
        
    def rrotate(self, node):
        temp1 = node.left.right
        temp2 = node.left
        node.left.right = node
        node.left = temp1
        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))
        temp2.height = 1 + max(self._get_height(temp2.left), self._get_height(temp2.right))
        return temp2
    
    def lrotate(self, node):
        temp1 = node.right.left
        temp2 = node.right
        node.right.left = node
        node.right = temp1
        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))
        temp2.height = 1 + max(self._get_height(temp2.left), self._get_height(temp2.right))
        return temp2
    
    def preorder(self, node):
        if not node:
            return []
        else:
            return [node.value] + self.preorder(node.left) + self.preorder(node.right)

n = int(input())
seq = list(map(int, input().split()))
AVL = avl()
for x in seq:
    AVL.insert(x)
print(" ".join(map(str, AVL.preorder(AVL.root))))