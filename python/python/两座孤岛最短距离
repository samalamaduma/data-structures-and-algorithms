from collections import deque
queue = deque()

def dfs(grid, x, y, n):
    directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]
    grid[x][y] = 1
    queue.append((x, y))
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == "1":
            dfs(grid, nx, ny, n)

def bfs(grid, n, queue):
    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]
    while queue:
        x, y = queue.popleft()
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == "0":
                grid[nx][ny] = grid[x][y] + 1
                queue.append((nx, ny))
            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == "1":
                return grid[x][y] - 1

n = int(input())
grid = [list(input()) for i in range(n)]
flag = False
for i in range(n):
    for j in range(n):
        if grid[i][j] == "1":
            dfs(grid, i, j, n)
            flag = True
            break
    if flag:
        break

print(bfs(grid, n, queue))