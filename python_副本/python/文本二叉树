class treenode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def preo(root):
    result = []
    if root:
        result += [root.value] + preo(root.left) + preo(root.right)
    return result

def ino(root):
    result = []
    if root:
        result += ino(root.left) + [root.value] + ino(root.right)
    return result

def posto(root):
    result = []
    if root:
        result += posto(root.left) + posto(root.right) + [root.value]
    return result

def clean(s):
    l = len(s)
    for i in range(1, l + 1):
        if s[l - i] == "*":
            del s[l - i]
    return s

n = int(input())
for i in range(n):
    s = input()
    root = treenode(s)
    stack = [root]
    while True:
        s = input()
        if s != "0":
            temp = treenode(s)
            l1 = len(temp.value)
            value1 = temp.value.lstrip("-")
            temp.value = value1
            l2 = len(temp.value)
            layer = l1 - l2
            if layer >= len(stack):
                if stack[-1].left:
                    stack[-1].right = temp
                else:
                    stack[-1].left = temp
                stack.append(temp)
            else:
                stack[layer] = temp
                if stack[layer - 1].left:
                    stack[layer - 1].right = temp
                else:
                    stack[layer - 1].left = temp
        else:
            break
    preo1 = clean(preo(root))
    ino1 = clean(ino(root))
    posto1 = clean(posto(root))
    print("".join(preo1))
    print("".join(posto1))
    print("".join(ino1))
    if i != n - 1:
        print()